cmake_minimum_required(VERSION 3.8)
project(wormhole_tools)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(yaml-cpp REQUIRED)
find_package(OpenCV REQUIRED) 
find_package(map_msgs REQUIRED) 

# SQLite3
find_package(PkgConfig REQUIRED)
pkg_check_modules(SQLITE3 REQUIRED sqlite3)

include_directories(${SQLITE3_INCLUDE_DIRS})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

add_executable(wormhole_recorder src/wormhole_recorder.cpp)
ament_target_dependencies(wormhole_recorder rclcpp geometry_msgs tf2 tf2_ros tf2_geometry_msgs nav_msgs map_msgs)
target_link_libraries(wormhole_recorder ${SQLITE3_LIBRARIES} yaml-cpp ${OpenCV_LIBS} )

install(TARGETS
  wormhole_recorder
  DESTINATION lib/${PROJECT_NAME})

ament_package()
